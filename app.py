import streamlit as st
import pandas as pd
import datetime
import os

st.set_page_config(layout="wide", page_title="ƒê√°nh gi√° R·ªßi ro Kh√≠ h·∫≠u")

try:
    st.image('NASALOGO.png', width=150) 
except FileNotFoundError:
    st.error("L·ªñI: Kh√¥ng t√¨m th·∫•y file NASALOGO.png.")
    
st.title("‚òÄÔ∏è ·ª®ng d·ª•ng ƒê√°nh gi√° R·ªßi ro Kh√≠ h·∫≠u (NASA Challenge)")
st.markdown("### X√°c su·∫•t l·ªãch s·ª≠ c·ªßa c√°c ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt c·ª±c ƒëoan (1980-2010)")
st.markdown("---") 

RISK_FILES = {
    "N√ìNG C·ª∞C ƒêOAN (Max Temp)": {'file': 'risk_stats_max.csv', 'icon': 'üî•', 'type': 'tr√™n', 'unit': ' ¬∞C'},
    "L·∫†NH C·ª∞C ƒêOAN (Min Temp)": {'file': 'risk_stats_min.csv', 'icon': 'üßä', 'type': 'd∆∞·ªõi', 'unit': ' ¬∞C'},
    "GI√ì M·∫†NH C·ª∞C ƒêOAN (Max Wind)": {'file': 'risk_stats_wind.csv', 'icon': 'üí®', 'type': 'tr√™n', 'unit': ' m/s'},
    "H∆†I N∆Ø·ªöC C·ª∞C ƒêOAN (Water Vapor)": {'file': 'risk_stats_water_vapor.csv', 'icon': 'üíß', 'type': 'tr√™n', 'unit': ' $kg/m^2$'},
    "M∆ØA C·ª∞C ƒêOAN (Rainfall)": {'file': 'risk_stats_rainfall.csv', 'icon': 'üåßÔ∏è', 'type': 'tr√™n', 'unit': ' mm/ng√†y'}, 
}

risk_data = {}
all_data_loaded = True
for name, info in RISK_FILES.items():
    file_path = info['file']
    try:
        df = pd.read_csv(file_path, index_col=[0, 1])
        risk_data[name] = df
    except FileNotFoundError:
        st.error(f"L·ªñI T·∫¢I D·ªÆ LI·ªÜU: Kh√¥ng t√¨m th·∫•y file **{file_path}**. Vui l√≤ng ƒë·∫£m b·∫£o ƒë√£ ch·∫°y `risk_analyzer.py` th√†nh c√¥ng.")
        all_data_loaded = False
        break
    except Exception as e:
        st.error(f"L·ªñI ƒê·ªäNH D·∫†NG FILE **{file_path}**: {e}")
        all_data_loaded = False
        break

if all_data_loaded:
    
    st.sidebar.header("T√πy ch·ªçn Truy v·∫•n")
    
    today = datetime.date.today()
    date_input = st.sidebar.date_input(
        "Ch·ªçn Ng√†y/Th√°ng b·∫°n quan t√¢m:",
        today
    )

    if date_input is not None:
        selected_month = date_input.month
        selected_day = date_input.day
    else:
        selected_month = today.month
        selected_day = today.day

    st.subheader(f"B√°o c√°o R·ªßi ro cho ng√†y **{selected_day:02d}** th√°ng **{selected_month:02d}**")
    st.markdown("---")

    cols = st.columns(5)
    
    risk_names = list(risk_data.keys())
    
    for i, name in enumerate(risk_names):
        df = risk_data[name]
        with cols[i]:
            st.markdown(f"**{RISK_FILES[name]['icon']} {name}**")
            st.markdown("---", unsafe_allow_html=True)
            
            try:
                threshold_col = [col for col in df.columns if 'Risk_Threshold' in col]
                if not threshold_col:
                    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y c·ªôt ng∆∞·ª°ng trong file CSV.")
                    continue
                threshold_col = threshold_col[0]

                risk_row = df.loc[(selected_month, selected_day)]
                
                threshold_val = risk_row[threshold_col]
                unit = RISK_FILES[name]['unit']
                risk_type = RISK_FILES[name]['type']
                
                st.info(f"Ng∆∞·ª°ng R·ªßi ro ({risk_type}): **{threshold_val:.2f}{unit}**")

                historical_prob = risk_row['Historical_Prob_%']
                theoretical_prob = risk_row['Theoretical_Risk_Prob_%']
                
                delta_str = f"L√Ω thuy·∫øt: {theoretical_prob:.2f}%"
                
                st.metric(
                    label="X√°c su·∫•t L·ªãch s·ª≠:",
                    value=f"{historical_prob:.2f}%",
                    delta=delta_str,
                    delta_color="off"
                )
                
            except KeyError:
                st.warning("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu r·ªßi ro cho ng√†y n√†y (Ki·ªÉm tra d·ªØ li·ªáu g·ªëc thi·∫øu ho·∫∑c l·ªói 29/02).")
            except Exception:
                st.error("L·ªói d·ªØ li·ªáu kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng ki·ªÉm tra l·∫°i file CSV.")

    st.markdown("---")
    st.subheader("T√πy ch·ªçn T·∫£i D·ªØ li·ªáu")
    st.markdown("Ng∆∞·ªùi d√πng c√≥ th·ªÉ t·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu ph√¢n t√≠ch ƒë√£ t√≠nh to√°n.")
    
    cols_dl = st.columns(5)
    
    for i, name in enumerate(risk_names):
        df = risk_data[name]
        with cols_dl[i]:
            st.download_button(
                label=f"T·∫£i {RISK_FILES[name]['icon']} {name.split('(')[0].strip()} (CSV)",
                data=df.to_csv().encode('utf-8'),
                file_name=f'risk_analysis_{name.split()[0].lower()}.csv',
                mime='text/csv'
            )